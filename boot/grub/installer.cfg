# This logic must stay here since the title is translated and thus can not be
# exported during grub.cfg (which initializes the GRUB).
if [ "x$retro" = "x0" ] ; then
	set cli_title=$"Install AOSC OS (Command-line Only)"
	if [ "$xgrub_cpu" != "xloongarch64" ] ; then
		set desktop_tgt=desktop
	else
		set desktop_tgt=desktop-latx
	fi
else
	set cli_title=$"Install AOSC OS"
fi

# Warning screen
function err_lowmem {
	if [ "x$retro" = "x1" ] ; then
		echo $"Your system currently have $memsize MiB of memory, but at least $memreq MiB is required to run LiveKit/Retro."
		echo $"The requirement is not fullfilled, thus LiveKit has been disabled.."
	else
		echo $"Your system currently have $memsize MiB of memory, but at least $memreq MiB is required to run the graphical environment."
		echo $"The graphical environment has been disabled."
	fi
	echo " "
	pause $"Press any key to return to the main menu."
}

# Low memory warning entries
if [ "x$lowmem" = "x1" ] ; then
	menuentry $"LiveKit has detected that your system has insufficient memory" {
		err_lowmem
	}
if [ "xretro" = "x1" ] ; then
	menuentry $"to run the LiveKit and has disabled the live environment." {
		err_lowmem
	}
else # x$retro = x1
	menuentry $"and has disabled the graphical environment." {
		err_lowmem
	}
fi # x$retro = x1
	menuentry ' ' {
		err_lowmem
	}
fi # x$lowmem = x1

if [ "x$nogui" != "x1" ] ; then
	menuentry $"Install AOSC OS" --class aosc --class gnu-linux --class gnu --class os --id livekit_gui --unrestricted {
		insmod gzio
		linux /boot/kernel root=aosc-livekit:CDLABEL=LiveKit quiet splash livekit.boot=livekit $kernel_lang_param
		initrd /boot/live-initramfs.img
	}
	if [ "x$grub_cpu" = "xx86_64" -o "x$grub_cpu" = "xi386" -o "x$grub_cpu" = "xarm64" ] ; then
		menuentry $"Install AOSC OS (With NVIDIA graphics)" --class aosc --class gnu-linux --class live --id livekit_gui_nvidia --unrestricted {
			insmod gzio
			linux /boot/kernel root=aosc-livekit:CDLABEL=LiveKit quiet splash livekit.boot=livekit-nvidia modprobe.blacklist=nouveau $kernel_lang_param
			initrd /boot/live-initramfs-nvidia.img
		}
	fi
	menuentry $"Try AOSC OS Desktop" --class aosc --class gnu-linux --class live --id aosc_live_desktop --unrestricted {
		insmod gzio
		linux /boot/kernel root=aosc-livekit:CDLABEL=LiveKit quiet splash livekit.boot=$desktop_tgt $kernel_lang_param
		initrd /boot/live-initramfs.img
	}
	if [ "x$grub_cpu" = "xx86_64" -o "x$grub_cpu" = "xi386" -o "x$grub_cpu" = "xarm64" ] ; then
		menuentry $"Try AOSC OS Desktop (With NVIDIA graphics)" --class aosc --class gnu-linux --class live --id aosc_live_desktop_nvidia --unrestricted {
			insmod gzio
			linux /boot/kernel root=aosc-livekit:CDLABEL=LiveKit quiet splash livekit.boot=desktop-nvidia modprobe.blacklist=nouveau $kernel_lang_param
			initrd /boot/live-initramfs-nvidia.img
		}
	fi
fi

# Here goes the CLI LiveKit
if [ "x$nocli" != "x1" ] ; then
	menuentry "$cli_title" --class aosc --class gnu-linux --class gnu --class os --id livekit_cli --unrestricted {
		linux /boot/kernel root=aosc-livekit:CDLABEL=LiveKit quiet splash livekit.boot=livekit systemd.unit=multi-user.target $kernel_lang_param
		initrd /boot/live-initramfs.img
	}
fi

# Troubleshooting options
if [ "x$nogui" != "x1" ] ; then
	submenu $"Troubleshooting Options >>" {
		menuentry $"Install AOSC OS (Basic graphics)" --class aosc --class gnu-linux --class gnu --class os --id livekit_gui_base_graphics --unrestricted {
			insmod gzio
			linux /boot/kernel root=aosc-livekit:CDLABEL=LiveKit quiet splash nomodeset livekit.boot=livekit $kernel_lang_param
			initrd /boot/live-initramfs.img
		}
	}
fi

# Other options
if [ "$grub_platform" = "efi" ]; then
submenu $"Utilities >>" {
if [ "$grub_cpu" = "x86_64" -o "$grub_cpu" = "i386" ] ; then
	menuentry $"Memory Test" {
		chainloader /boot/memtest.efi
	}
fi
	menuentry $"UEFI Firmware Settings" $menuentry_id_option 'uefi-firmware' {
		fwsetup
	}
}
else
if [ "$grub_cpu" = "x86_64" -o "$grub_cpu" = "i386" ] ; then
submenu $"Utilities >>" {
	menuentry $"Memory Test" {
		linux16 /boot/memtest.bin
	}
}
fi
fi

menuentry $"Boot Default OS" --id boot_default_os {
	exit 1
}

if [ "x$grub_platform" = "xpc" -o "x$grub_platform" = "xefi" ] ; then
	menuentry $"Restart" {
		reboot
	}
	menuentry $"Power Off" {
		halt
	}
fi
